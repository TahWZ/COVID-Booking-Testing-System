/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.fit3077.project.UI;

import com.fit3077.project.UI.utils.bookingsListener;
import com.fit3077.project.UI.modifyBookingForm;
import com.fit3077.project.UI.deleteBookingForm;
import com.fit3077.project.models.booking.bookingStatus;
import com.fit3077.project.models.booking.Booking;
import com.fit3077.project.models.booking.bookingAPICollection;
import com.fit3077.project.models.booking.bookingCollection;
import com.fit3077.project.models.booking.bookingNotification;
import com.fit3077.project.models.testingSite.testingSite;
import com.fit3077.project.models.user.User;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * Panel for receptionists to view, modify and delete bookings from their workplace.
 * Differs from the assistBookingPanel as it allows deletion but not cancellation of booking.
 * @author User
 */
public class adminBookingPanel extends javax.swing.JPanel implements bookingsListener{

    User currentUser; // The current logged in user
    testingSite selectedWorkplace;  // The current testing site the receptionist is working at
    Booking selectedBooking; //The booking the receptionist selected
    
    /**
     * Creates new panel adminBookingPanel
     */
    public adminBookingPanel(testingSite selectedTestingSite) {
        initComponents();
        this.selectedWorkplace = selectedTestingSite;
        JTable table = bookingTable;
        
        //Sorts the table based on last modified time
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(table.getModel());
        table.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
        sortKeys.add(new RowSorter.SortKey(bookingTable.getColumnCount()-1, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        loadBookings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        modifyButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Patient name", "Date and time", "Location", "Test type", "Status", "Last modified"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bookingTable);
        if (bookingTable.getColumnModel().getColumnCount() > 0) {
            bookingTable.getColumnModel().getColumn(0).setMinWidth(220);
            bookingTable.getColumnModel().getColumn(0).setMaxWidth(220);
            bookingTable.getColumnModel().getColumn(2).setMinWidth(200);
            bookingTable.getColumnModel().getColumn(2).setMaxWidth(200);
            bookingTable.getColumnModel().getColumn(3).setMinWidth(200);
            bookingTable.getColumnModel().getColumn(3).setMaxWidth(200);
        }

        modifyButton.setText("Modify");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modifyButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1172, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Admin Panel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Loads the all booking that is in the same testing site as the receptionist's workplace
     */
    private void loadBookings(){
        bookingCollection bCollection = bookingAPICollection.getInstance();
        Booking[] bookings = bCollection.getAllBookings();
        DefaultTableModel model = (DefaultTableModel) bookingTable.getModel();
        model.setNumRows(0);
        if (bookings != null){
            for (Booking b: bookings) {
                if (b.getBookSite().getID() == this.selectedWorkplace.getID()){
                    try{
                        Object[] row = {
                            b.getID(),
                            b.getPatient().getFullName(),
                            b.getDateTime(),
                            b.getBookSite().getName(),
                            b.getTestType(),
                            b.getBookStatus(),
                            b.getLastModTime()
                        };
                        model.addRow(row);
                    } catch (Exception e){}
                }
            }
        }
    }
    
    /**
     * Opens form for booking modification
     */
    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        // TODO add your handling code here:
        if (validateBooking()){
            if (selectedBooking.getBookStatus() == bookingStatus.LAPSED || selectedBooking.getBookStatus() == bookingStatus.COMPLETE){
                JOptionPane.showMessageDialog(this, "Lapsed/Completed bookings can't be modified", "Request failed",JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            modifyBookingForm form = new modifyBookingForm(selectedBooking);
            form.setVisible(true);
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    /**
     * Opens form for booking deletion
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (validateBooking()){
            deleteBookingForm form = new deleteBookingForm(selectedBooking);
            form.setVisible(true);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * (bookingListener class method)
     * Called whenever a change to any bookings is detected.
     * Refreshes the booking table
     */
    public void refreshBookings(bookingNotification bNotification){
        loadBookings();
    }
    
    /**
     * Checks if a booking is selected and whether the selected booking is valid
     */
    private Boolean validateBooking(){
        int row = bookingTable.getSelectedRow();
        if (row == -1){
            JOptionPane.showMessageDialog(this, "Please select a booking first", "Request failed",JOptionPane.INFORMATION_MESSAGE);
            return false;
        } 
        String bookingID = (String)bookingTable.getValueAt(row,0);
        bookingCollection bCollection = bookingAPICollection.getInstance();
        selectedBooking = bCollection.getBookingByID(bookingID);
        if (selectedBooking == null){
            JOptionPane.showMessageDialog(this, "Please enter a valid booking ID", "Request failed",JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookingTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyButton;
    // End of variables declaration//GEN-END:variables
}
